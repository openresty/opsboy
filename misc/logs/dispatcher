#!/usr/bin/env perl

use strict;
use warnings;

use Getopt::Std;
use JSON::XS;
use POSIX qw( ceil );
use List::Util qw( sum );
#use Parallel::ForkManager;

my %opts;
getopts("hi:a:t:e:v:o:Scrfb:", \%opts) or
    die usage(1);

if ($opts{h}) {
    usage(0);
}

my $arch = $opts{a}
    or die "No -a <arch> option specified.\n";

my $Mins = $opts{t}
    or die "No -t <minutes> option specified.\n";

my $run = $opts{r};
my $cc_opt = $opts{o};

my $force = $opts{f};

my $use_lua_resty_core = $opts{c};
my $no_stap = $opts{S};

my $exclude = $opts{e};
my $exclude_opt = '';
if (defined $exclude) {
    $exclude_opt = "-e '$exclude'";
}

my $nginx_ver = $opts{v};
if (defined $nginx_ver && $nginx_ver !~ /^\d+\.\d+\.\d+$/) {
    die "Bad nginx version number specified in the -v option: $nginx_ver\n";
}

my $opsboy_branch = $opts{b};

my @goals;
my @comps = @ARGV;
if (@comps) {
    @goals = split /\s+/, `./gen-user-data $exclude_opt @comps`;
    if ($? != 0) {
        die "aborted.\n";
    }
}

my $jsonxs = JSON::XS->new->ascii;

my $infile = "ast.json";
open my $in, $infile
    or die "Cannot open $infile for reading: $!\n";

my $json = do { local $/; <$in> };

close $in;

my $ast = $jsonxs->decode($json);

my $arch_tree = $ast->{$arch};

my %elapsed;
while (my ($ngx, $ngx_tree) = each %$arch_tree) {
    #warn $ngx;
    while (my ($comp, $comp_tree) = each %$ngx_tree) {
        #warn "$comp";
        while (my ($mode, $rec) = each %$comp_tree) {
            my $elapsed = $rec->{elapsed};
            if (defined $elapsed) {
                my $name = "t$mode-$comp";
                $elapsed{$name} = $elapsed;
            }
        }
    }
}

if (!@goals) {
    @goals = keys %elapsed;
}

my $sum = 0;
my @new_goals;
for my $goal (@goals) {
    if (!defined $elapsed{$goal}) {
        warn "WARNING: elapsed time for $goal is not found.\n";
        $elapsed{$goal} = 60 * 10; # default to 10 min
    }

    $sum += $elapsed{$goal};
    push @new_goals, $goal;
}

@goals = @new_goals;

@goals = sort { $elapsed{$b} <=> $elapsed{$a} } @goals;

#warn "@goals\n";

my $Secs = $Mins * 60;
my $n = ceil($sum / $Secs);
print "Requires at least $n machines.\n";

my @buckets;
while (1) {
    #warn "trying $n nodes...\n";

    undef @buckets;
    my @gs = @goals;
    my $rest;
    while (@gs) {
        if (!defined $rest) {
            $rest = @gs;

        } else {
            if ($rest == @gs) {
                last;
            }

            $rest = @gs;
        }

        #warn "gs: ", scalar @gs;
        for (my $i = 0; $i < $n && @gs; $i++) {
            #warn "checking node $i ($n)...\n";

            $buckets[$i] ||= [];
            my $bucket = $buckets[$i];

            if (@$bucket) {
                my $secs = sum map { $elapsed{$_} } @$bucket;
                $secs += $elapsed{$gs[0]};
                my $mins = ceil($secs/60);
                if ($mins > $Mins) {
                    next;
                }
            }

            my $g = shift @gs;
            push @$bucket, $g;
        }
    }

    if (@gs) {
        $n++;
        next;
    }

    my $retry;

    for my $bucket (@buckets) {
        my $secs = sum map { $elapsed{$_} } @$bucket;
        my $mins = ceil($secs/60);
        if ($mins > $Mins && @$bucket > 1) {
            $retry = 1;
            last;
        }
    }

    last if not $retry;

    $n++;
}

my $i = 1;
for my $bucket (@buckets) {
    my $secs = sum map { $elapsed{$_} } @$bucket;
    my $mins = ceil($secs/60);

    # always add force=1 to be safe
    push @$bucket, "force=1";

    if (defined $nginx_ver) {
        push @$bucket, "nginx_version=$nginx_ver";
    }

    if ($use_lua_resty_core) {
        push @$bucket, "use_lua_resty_core=1";
    }

    if ($cc_opt) {
        push @$bucket, "nginx_cc_opt=$cc_opt";
    }

    if ($no_stap) {
        push @$bucket, "use_stap=0";
    }

    if ($opsboy_branch) {
        push @$bucket, "opsboy_branch=$opsboy_branch";
    }

    warn "bucket $i: @$bucket ($mins min)\n";
    $i++;
}

if ($run) {
    #my $pm = Parallel::ForkManager->new(10);

    for my $bucket (@buckets) {
        #my $pid = $pm->start and next;

        my @cmd = ('./run-node', $opts{i} ? ("-t", "$opts{i}") : (), '-a', $arch, @$bucket);
        #print "command: @cmd\n";
        system(@cmd) == 0
            or warn "failed to start the node. abort. cmd: @cmd\n";

        #$pm->finish;
    }

    #$pm->wait_all_children();
}

sub usage {
    my $rc = shift;
    my $msg =
        "Usage: $0 [-S] [-i instance-type] [-e exclude-pattern] [-v <nginx-version>] [-o nginx-cc-opts] [-c] [-r] [-f] -t <minutes> -a <arch> <component>...\n";
    if ($rc != 0) {
        print STDERR $msg;
        exit $rc;
    }
    print $msg;
    exit 0;
}
