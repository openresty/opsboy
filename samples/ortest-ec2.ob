# OpenResty Tester Deployment Script for Amazon Linux AMI

jobs = 3;
nginx_version = 1.27.0;
openresty_version = 1.25.3.1;
redis_version = 5.0.9;
ngx_auth_request_version = 0.2;
pcre_version = 8.44;
force = 0;
ragel_version = 6.10;
valgrind_version = 3.16.1;
libev_version = 4.33;
systemtap_version = 4.3;
perl516_version = 5.16.2;
bison_version = 3.7.3;
ccache_version = 3.7.12;
luajit_branch = v2.1-agentzh;
test_nginx_branch = master;
ngx_lua_branch = travis-1.27.0;
stream_lua_branch = travis-1.27.0;
resty_core_branch = travis-1.27.0;
openssl_version = 1.1.1w;
openssl_patch_version = 1.1.1f;
#luajit_branch = v2.1-agentzh-no-stitch;
use_lua_resty_core = 0;
use_stap = 0;
nginx_cc_opt = '-O1 -I/opt/ssl/include';
nginx_ld_opt = '-L/opt/ssl/lib';
luajit_xcflags = '-DLUAJIT_NUMMODE=2 -DLUA_USE_APICHECK -DLUA_USE_ASSERT -DLUAJIT_ENABLE_LUA52COMPAT -msse4.2';

ngx-lua-tests-firewall-reject {
    test 'sudo iptables -S|grep -- "-A OUTPUT -p udp -m udp --dport 10086 -j REJECT"';
    sh 'sudo iptables -I OUTPUT 1 -p udp --dport 10086 -j REJECT';
    dep iptables;
}

ngx-lua-tests-firewall-drop-tcp {
    test 'sudo iptables -S|grep -- "-A OUTPUT -p tcp --dst 127.0.0.2 --dport 12345 -j DROP"';
    sh 'sudo iptables -I OUTPUT 1 -p tcp --dst 127.0.0.2 --dport 12345 -j DROP';
    dep iptables;
}

ngx-lua-tests-firewall-drop-udp {
    test 'sudo iptables -S|grep -- "-A OUTPUT -p udp --dst 127.0.0.2 --dport 12345 -j DROP"';
    sh 'sudo iptables -I OUTPUT 1 -p udp --dst 127.0.0.2 --dport 12345 -j DROP';
    dep iptables;
}

ngx-lua-tests-firewall-rules {
    dep ngx-lua-tests-firewall-reject;
    dep ngx-lua-tests-firewall-drop-tcp;
    dep ngx-lua-tests-firewall-drop-udp;
}

ngx-lua-tests-ip-settings {
    test '[ $(sudo ip addr show lo | grep -E "10.254.254.[12]/24" | wc -l) -eq 2 ]';
    sh 'sudo ip addr add 10.254.254.1/24 dev lo';
    sh 'sudo ip addr add 10.254.254.2/24 dev lo';
}

iptables {
    prog iptables;
    yum iptables;
}

run-caching-nameserver {
    running '/named -u ';
    sh 'sudo service named start';
    dep named caching-nameserver-config;
}

named {
    prog named;
    yum caching-nameserver;
}

docker {
    prog docker;
    yum docker;
}

run-docker {
    file /var/run/docker.sock;
    sh 'sudo service docker start';
    dep docker;
}

caching-nameserver-config {
    test 'grep 8.8.8.8 /etc/named.conf';
    sh 'sudo wget http://agentzh.org/misc/nginx/test/caching-nameserver.conf -O /etc/named.conf';
    sh 'sudo chmod a+r /etc/named.conf';
}

openssl {
    # NB: the 'openssl' command will be used by the test case
    env PATH /opt/ssl/bin:$PATH;

    file /opt/ssl/bin/openssl;
    test '/opt/ssl/bin/openssl version|grep "OpenSSL $openssl_version"';

    env LD_LIBRARY_PATH /opt/ssl/lib:$LD_LIBRARY_PATH;

    cwd /tmp;
    fetch https://www.openssl.org/source/openssl-$openssl_version.tar.gz;
    tarball openssl-$openssl_version.tar.gz;
    sh 'cd openssl-$openssl_version && patch -p1 < ~/git/openresty/patches/openssl-$openssl_patch_version-sess_set_get_cb_yield.patch && ./config no-threads no-asm shared enable-ssl3 enable-ssl3-method --libdir=lib -g --prefix=/opt/ssl -DPURIFY && sed -i \'s/ -O3 / -O1 /g\' Makefile && make -j$jobs && sudo make install_sw';
    dep cc cxx openresty;
}

luajit_sysmalloc {
    always;
    cwd ~/git/luajit2;
    sh 'sudo rm -rf /opt/luajit-sysm; git reset --hard; git checkout $luajit_branch && git merge origin/$luajit_branch && make CC=gcc48 CCDEBUG=-g XCFLAGS="-DLUAJIT_USE_VALGRIND -I/opt/valgrind/include -DLUAJIT_USE_SYSMALLOC $luajit_xcflags" -B -j$jobs PREFIX=/opt/luajit-sysm && sudo make install PREFIX=/opt/luajit-sysm';
    dep luajit-git valgrind;
}

luajit {
    always;
    cwd ~/git/luajit2;
    sh 'sudo rm -rf /opt/luajit; git reset --hard; git checkout $luajit_branch && git merge origin/$luajit_branch && make CC=gcc48 CCDEBUG=-g XCFLAGS="$luajit_xcflags" -B -j$jobs PREFIX=/opt/luajit && sudo make install PREFIX=/opt/luajit';
    dep luajit-git;
}

luajit-git {
    git https://github.com/openresty/luajit2.git ~/git/luajit2 $luajit_branch;
}






t {
    dep t-ngx_array_var;
    dep t-ngx_redis2;
    dep t-ngx_lua;
    dep t-ngx_srcache;
    dep t-ngx_memc;
    dep t-ngx_set_misc;
    dep t-ngx_xss;
    dep t-ngx_drizzle;
    dep t-ngx_rds_json;
    dep t-ngx_echo;
    dep t-ngx_postgres;
    dep t-ngx_eval;
    dep t-ngx_headers_more;
    dep t-ngx_rds_csv;
    dep t-ngx_encrypted_session;
    dep t-ngx_form_input;
    dep t-ngx_coolkit;
    dep t-ngx_iconv;
    dep t-ngx_example_lua;
    dep t-ngx_lua_upstream;
    dep t-ngx_replace_filter;
    dep t-ngx_stream_echo;
    dep t-ngx_stream_lua;
    dep t-lua-resty-memcached;
    dep t-lua-resty-redis;
    dep t-lua-resty-mysql;
    dep t-lua-resty-string;
    dep t-lua-resty-upload;
    dep t-lua-resty-dns;
    dep t-lua-resty-websocket;
    dep t-lua-resty-lock;
    dep t-lua-resty-logger-socket;
    dep t-lua-resty-core;
    dep t-lua-resty-upstream-healthcheck;
    dep t-lua-resty-lrucache;
    dep t-lua-resty-limit-traffic;
    dep t-lua-resty-signal;
    dep t-lua-resty-shell;
    dep t-sregex;
    dep t-resty-cli;
}

to {
    dep to-ngx_array_var;
    dep to-ngx_redis2;
    dep to-ngx_lua;
    dep to-ngx_srcache;
    dep to-ngx_memc;
    dep to-ngx_set_misc;
    dep to-ngx_xss;
    dep to-ngx_drizzle;
    dep to-ngx_rds_json;
    dep to-ngx_echo;
    dep to-ngx_postgres;
    dep to-ngx_eval;
    dep to-ngx_headers_more;
    dep to-ngx_rds_csv;
    dep to-ngx_encrypted_session;
    dep to-ngx_form_input;
    dep to-ngx_coolkit;
    dep to-ngx_iconv;
    dep to-ngx_example_lua;
    dep to-ngx_lua_upstream;
    dep to-ngx_replace_filter;
    dep to-ngx_stream_echo;
    dep to-ngx_stream_lua;
}

tv {
    dep tv1 tv2;
    dep tv-sregex;
    dep tv-resty-cli;
}

tv1 {

    dep tv-ngx_array_var;
    dep tv-ngx_redis2;
    dep tv-ngx_lua;
}

tv2 {

    dep tv-ngx_srcache;
    dep tv-ngx_memc;
    dep tv-ngx_set_misc;
    dep tv-ngx_xss;
    dep tv-ngx_drizzle;
    dep tv-ngx_rds_json;
    dep tv-ngx_echo;
    dep tv-ngx_postgres;
    dep tv-ngx_eval;
    dep tv-ngx_headers_more;
    dep tv-ngx_rds_csv;
    dep tv-ngx_encrypted_session;
    dep tv-ngx_form_input;
    dep tv-ngx_coolkit;
    dep tv-ngx_iconv;
    dep tv-ngx_example_lua;
    dep tv-ngx_lua_upstream;
    dep tv-ngx_replace_filter;
    dep tv-ngx_stream_echo;
    dep tv-ngx_stream_lua;
}

tr {
    dep tr-ngx_redis2;
    dep tr-ngx_lua;
    dep tr-ngx_srcache;
    dep tr-ngx_memc;
    dep tr-ngx_drizzle;
    dep tr-ngx_rds_json;
    dep tr-ngx_echo;
    dep tr-ngx_postgres;
    dep tr-ngx_eval;
    dep tr-ngx_rds_csv;
    dep tr-ngx_form_input;
    dep tr-ngx_iconv;
    dep tr-ngx_replace_filter;
    dep tr-ngx_stream_echo;
    dep tr-ngx_stream_lua;
    dep tr-lua-resty-memcached;
    dep tr-lua-resty-redis;
    dep tr-lua-resty-mysql;
    dep tr-lua-resty-string;
    dep tr-lua-resty-upload;
    dep tr-lua-resty-dns;
    dep tr-lua-resty-websocket;
    dep tr-lua-resty-lock;
    dep tr-lua-resty-logger-socket;
    dep tr-lua-resty-core;
    dep tr-lua-resty-upstream-healthcheck;
    dep tr-lua-resty-lrucache;
    dep tr-lua-resty-limit-traffic;
    dep tr-lua-resty-signal;
    dep tr-lua-resty-shell;
}

trv {
    dep trv1 trv2;
}

trv1 {

    dep trv-ngx_redis2;
    dep trv-ngx_lua;
    dep trv-lua-resty-memcached;
    dep trv-lua-resty-redis;
    dep trv-lua-resty-mysql;
    dep trv-lua-resty-string;
    dep trv-lua-resty-upload;
    dep trv-lua-resty-dns;
    dep trv-lua-resty-websocket;
    dep trv-lua-resty-lock;
    dep trv-lua-resty-logger-socket;
    dep trv-lua-resty-core;
    dep trv-lua-resty-upstream-healthcheck;
    dep trv-lua-resty-lrucache;
    dep trv-lua-resty-limit-traffic;
    dep trv-lua-resty-signal;
    dep trv-lua-resty-shell;
}

trv2 {

    dep trv-ngx_srcache;
    dep trv-ngx_memc;
    dep trv-ngx_drizzle;
    dep trv-ngx_rds_json;
    dep trv-ngx_echo;
    dep trv-ngx_postgres;
    dep trv-ngx_eval;
    dep trv-ngx_rds_csv;
    dep trv-ngx_form_input;
    dep trv-ngx_iconv;
    dep trv-ngx_replace_filter;
    dep trv-ngx_stream_echo;
    dep trv-ngx_stream_lua;
}

tw {
    dep tw-ngx_redis2;
    dep tw-ngx_lua;
    dep tw-ngx_srcache;
    dep tw-ngx_memc;
    dep tw-ngx_drizzle;
    dep tw-ngx_rds_json;
    dep tw-ngx_echo;
    dep tw-ngx_postgres;
    dep tw-ngx_eval;
    dep tw-ngx_rds_csv;
    dep tw-ngx_form_input;
    dep tw-ngx_iconv;
    dep tw-ngx_replace_filter;
    dep tw-ngx_stream_echo;
    dep tw-ngx_stream_lua;
    dep tw-lua-resty-memcached;
    dep tw-lua-resty-redis;
    dep tw-lua-resty-mysql;
    dep tw-lua-resty-string;
    dep tw-lua-resty-upload;
    dep tw-lua-resty-dns;
    dep tw-lua-resty-websocket;
    dep tw-lua-resty-lock;
    dep tw-lua-resty-logger-socket;
    dep tw-lua-resty-core;
    dep tw-lua-resty-upstream-healthcheck;
    dep tw-lua-resty-lrucache;
    dep tw-lua-resty-limit-traffic;
    dep tw-lua-resty-signal;
    dep tw-lua-resty-shell;
}

twv {
    dep twv1 twv2;
}

twv1 {

    dep twv-ngx_redis2;
    dep twv-ngx_lua;
    dep trv-lua-resty-memcached;
    dep trv-lua-resty-redis;
    dep trv-lua-resty-mysql;
    dep trv-lua-resty-string;
    dep trv-lua-resty-upload;
    dep trv-lua-resty-dns;
    dep trv-lua-resty-websocket;
    dep trv-lua-resty-lock;
    dep trv-lua-resty-logger-socket;
    dep trv-lua-resty-core;
    dep trv-lua-resty-upstream-healthcheck;
    dep trv-lua-resty-lrucache;
    dep trv-lua-resty-limit-traffic;
    dep trv-lua-resty-signal;
    dep trv-lua-resty-shell;
}

twv2 {

    dep twv-ngx_srcache;
    dep twv-ngx_memc;
    dep twv-ngx_drizzle;
    dep twv-ngx_rds_json;
    dep twv-ngx_echo;
    dep twv-ngx_postgres;
    dep twv-ngx_eval;
    dep twv-ngx_rds_csv;
    dep twv-ngx_form_input;
    dep twv-ngx_iconv;
    dep twv-ngx_replace_filter;
    dep twv-ngx_stream_echo;
    dep twv-ngx_stream_lua;
}

th {
    dep th-ngx_array_var;
    dep th-ngx_redis2;
    dep th-ngx_lua;
    dep th-ngx_srcache;
    dep th-ngx_memc;
    dep th-ngx_set_misc;
    dep th-ngx_xss;
    dep th-ngx_drizzle;
    dep th-ngx_rds_json;
    dep th-ngx_echo;
    dep th-ngx_postgres;
    dep th-ngx_eval;
    dep th-ngx_headers_more;
    dep th-ngx_rds_csv;
    dep th-ngx_encrypted_session;
    dep th-ngx_form_input;
    dep th-ngx_coolkit;
    dep th-ngx_iconv;
    dep th-ngx_example_lua;
    dep th-ngx_lua_upstream;
    dep th-ngx_replace_filter;
    dep th-ngx_stream_echo;
    dep th-ngx_stream_lua;
    dep th-lua-resty-memcached;
    dep th-lua-resty-redis;
    dep th-lua-resty-mysql;
    dep th-lua-resty-string;
    dep th-lua-resty-upload;
    dep th-lua-resty-dns;
    dep th-lua-resty-websocket;
    dep th-lua-resty-lock;
    dep th-lua-resty-logger-socket;
    dep th-lua-resty-core;
    dep th-lua-resty-upstream-healthcheck;
    dep th-lua-resty-lrucache;
    dep th-lua-resty-limit-traffic;
    dep th-lua-resty-signal;
    dep th-lua-resty-shell;
}

thv {
    dep thv-ngx_array_var;
    dep thv-ngx_redis2;
    dep thv-ngx_lua;
    dep thv-ngx_srcache;
    dep thv-ngx_memc;
    dep thv-ngx_set_misc;
    dep thv-ngx_xss;
    dep thv-ngx_drizzle;
    dep thv-ngx_rds_json;
    dep thv-ngx_echo;
    dep thv-ngx_postgres;
    dep thv-ngx_eval;
    dep thv-ngx_headers_more;
    dep thv-ngx_rds_csv;
    dep thv-ngx_encrypted_session;
    dep thv-ngx_form_input;
    dep thv-ngx_coolkit;
    dep thv-ngx_iconv;
    dep thv-ngx_example_lua;
    dep thv-ngx_lua_upstream;
    dep thv-ngx_replace_filter;
    dep thv-ngx_stream_echo;
    dep thv-ngx_stream_lua;
    dep thv-lua-resty-memcached;
    dep thv-lua-resty-redis;
    dep thv-lua-resty-mysql;
    dep thv-lua-resty-string;
    dep thv-lua-resty-upload;
    dep thv-lua-resty-dns;
    dep thv-lua-resty-websocket;
    dep thv-lua-resty-lock;
    dep thv-lua-resty-logger-socket;
    dep thv-lua-resty-core;
    dep thv-lua-resty-upstream-healthcheck;
    dep thv-lua-resty-lrucache;
    dep thv-lua-resty-limit-traffic;
    dep thv-lua-resty-signal;
    dep thv-lua-resty-shell;
}

tl {
    dep tl-ngx_array_var;
    dep tl-ngx_redis2;
    dep tl-ngx_lua;
    dep tl-ngx_srcache;
    dep tl-ngx_memc;
    dep tl-ngx_set_misc;
    dep tl-ngx_xss;
    dep tl-ngx_drizzle;
    dep tl-ngx_rds_json;
    dep tl-ngx_echo;
    dep tl-ngx_postgres;
    dep tl-ngx_eval;
    dep tl-ngx_headers_more;
    dep tl-ngx_rds_csv;
    dep tl-ngx_encrypted_session;
    dep tl-ngx_form_input;
    dep tl-ngx_coolkit;
    dep tl-ngx_iconv;
    dep tl-ngx_example_lua;
    dep tl-ngx_lua_upstream;
    dep tl-ngx_replace_filter;
    dep tl-ngx_stream_echo;
    dep tl-ngx_stream_lua;
    dep tl-lua-resty-memcached;
    dep tl-lua-resty-redis;
    dep tl-lua-resty-mysql;
    dep tl-lua-resty-string;
    dep tl-lua-resty-upload;
    dep tl-lua-resty-dns;
    dep tl-lua-resty-websocket;
    dep tl-lua-resty-lock;
    dep tl-lua-resty-logger-socket;
    dep tl-lua-resty-core;
    dep tl-lua-resty-upstream-healthcheck;
    dep tl-lua-resty-lrucache;
    dep tl-lua-resty-limit-traffic;
    dep tl-lua-resty-signal;
    dep tl-lua-resty-shell;
}

ngx_stream_echo {
    git https://github.com/openresty/stream-echo-nginx-module.git ~/git/stream-echo-nginx-module;
}

ngx_stream_lua {
    git https://github.com/openresty/stream-lua-nginx-module.git ~/git/stream-lua-nginx-module $stream_lua_branch;
    dep lua-resty-core;
}

ngx_srcache {
    git https://github.com/openresty/srcache-nginx-module.git ~/git/srcache-nginx-module;
    dep ndk ngx_set_misc ngx_redis ngx_xss;
    dep ngx_redis2 ngx_eval ngx_echo ngx_headers_more;
    dep ngx_lua ngx_rds_json ngx_drizzle ngx_postgres;
    dep ngx_memc;
}

ngx_memc {
    git https://github.com/openresty/memc-nginx-module.git ~/git/memc-nginx-module;
    dep ragel ngx-lua-tests-firewall-drop-tcp ngx-lua-tests-firewall-drop-udp;
}

ragel {
    prog ragel;
    test 'ragel -v|grep "$ragel_version"';
    cwd /tmp;
    fetch http://www.colm.net/files/ragel/ragel-$ragel_version.tar.gz;
    tarball ragel-$ragel_version.tar.gz;
    sh 'cd ragel-$ragel_version && ./configure && make -j$jobs && sudo make install';
    dep cxx;
}

cxx {
    prog g++;
    yum gcc-c++;
    dep make;
}

ngx_postgres {
    git https://github.com/openresty/ngx_postgres.git ~/git/postgres-nginx-module;
    env LIBPQ_INC /usr/include/pgsql92;
    env LIBPQ_LIB /usr/lib64/pgsql92;
    dep libpq;
}

ngx_replace_filter {
    git https://github.com/openresty/replace-filter-nginx-module.git ~/git/replace-filter-nginx-module;
}

sregex {
    always;
    #file ~/git/mockeagain/mockeagain.so;
    sh 'cd ~/git/sregex && make -j$jobs || make clean all';
    env PATH /usr/local/openresty-debug/luajit/bin:/opt/bison/bin:$PATH;
    dep sregex-git;
    dep cc bison openresty-debug;
    dep perl516-IPC-Run3 perl516-Test-LongString perl516-Test-Base perl516;
    dep perl516-Test-Differences;
}

resty-cli {
    git https://github.com/openresty/resty-cli.git ~/git/resty-cli;
    dep ngx_lua;
    dep perl-IPC-Run test-longstring test-base text-diff;
}

lua-tablepool {
    git https://github.com/openresty/lua-tablepool.git ~/git/lua-tablepool;
}

lua-resty-rsa {
    git https://github.com/spacewander/lua-resty-rsa.git ~/git/lua-resty-rsa;
}

perl516 {
    file '/opt/perl516/bin/perl';
    test '/opt/perl516/bin/perl -v|grep "$perl516_version"';
    cwd /tmp;
    fetch http://www.cpan.org/src/5.0/perl-$perl516_version.tar.gz;
    tarball perl-$perl516_version.tar.gz;
    sh 'cd perl-$perl516_version && sh Configure -Doptimize="-g -O2" -Dcc=gcc48 -Dprefix=/opt/perl516 -des && make -j$jobs && sudo make install';
    dep cc;
}

perl516-Test-LongString {
    test '/opt/perl516/bin/perl -MTest::LongString -e1';
    sh 'echo y|sudo /opt/perl516/bin/cpan -i Test::LongString';
    dep perl516;
}

perl516-Test-Differences {
    test '/opt/perl516/bin/perl -MTest::Differences -e1';
    sh 'echo y|sudo /opt/perl516/bin/cpan -i Test::Differences';
    dep perl516;
}

perl516-Test-Base {
    test '/opt/perl516/bin/perl -e "require(q{Test/Base.pm});"';
    sh 'echo y|sudo /opt/perl516/bin/cpan -i Test::Base';
    dep perl516;
}

perl516-IPC-Run3 {
    test '/opt/perl516/bin/perl -MIPC::Run3 -e1';
    sh 'echo y|sudo /opt/perl516/bin/cpan -i IPC::Run3';
    dep perl516;
}

perl-IPC-Run {
    test 'perl -MIPC::Run -e1';
    yum perl-IPC-Run;
}

perl-IPC-Run3 {
    test 'perl -MIPC::Run3 -e1';
    yum perl-IPC-Run3;
}

t-sregex {
    always;
    cwd ~/git/sregex;
    sh 'PAGER= git log HEAD^..HEAD';
    sh 'PATH=/opt/perl516/bin:$PATH make test -j$jobs';
    dep sregex;
}

tv-sregex {
    always;
    cwd ~/git/sregex;
    sh 'PAGER= git log HEAD^..HEAD';
    sh 'PATH=/opt/perl516/bin:$PATH make valtest -j$jobs';
    dep sregex;
}

t-resty-cli  {
    always;
    cwd ~/git/resty-cli;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test resty-cli;

    env TEST_RESTY_USE_VALGRIND '';
    dep build-ngx_lua;
}
tv-resty-cli  {
    always;
    cwd ~/git/resty-cli;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test resty-cli;
    env TEST_RESTY_USE_VALGRIND 1;
    dep build-ngx_lua;
}

bison {
    file /opt/bison/bin/bison;
    test '/opt/bison/bin/bison --version|grep "$bison_version"';
    cwd /tmp;
    fetch http://ftp.gnu.org/gnu/bison/bison-$bison_version.tar.gz;
    tarball bison-$bison_version.tar.gz;
    sh 'cd bison-$bison_version/ && CC=gcc48 ./configure --prefix=/opt/bison && make -j$jobs && sudo make install';
    dep cc;
}

sregex-git {
    git https://github.com/openresty/sregex.git ~/git/sregex;
}

libpq {
    #file /usr/lib64/libpq.so;
    file /usr/include/pgsql92/libpq-fe.h;
    yum postgresql92-devel;
}

ngx_drizzle {
    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    git https://github.com/openresty/drizzle-nginx-module.git ~/git/drizzle-nginx-module;
    dep libdrizzle;
}

libdrizzle {
    file /opt/drizzle/lib/libdrizzle.so;
    file /opt/drizzle/include/libdrizzle-1.0/libdrizzle/drizzle.h;
    cwd /tmp;
    fetch http://agentzh.org/misc/nginx/drizzle7-2011.07.21.tar.gz;
    tarball drizzle7-2011.07.21.tar.gz;
    sh 'cd drizzle7-2011.07.21/ && ./configure --without-server --prefix=/opt/drizzle && make libdrizzle-1.0 && sudo make install-libdrizzle-1.0';
    dep cc;
}

ngx_rds_json {
    git https://github.com/openresty/rds-json-nginx-module.git ~/git/rds-json-nginx-module;
}

ngx_rds_csv {
    git https://github.com/openresty/rds-csv-nginx-module.git ~/git/rds-csv-nginx-module;
}

ngx_array_var {
    git https://github.com/openresty/array-var-nginx-module.git ~/git/array-var-nginx-module;
    dep ndk;
}

ngx_encrypted_session {
    git https://github.com/openresty/encrypted-session-nginx-module.git ~/git/encrypted-session-nginx-module;
    dep ndk;
}

ngx_form_input {
    git https://github.com/calio/form-input-nginx-module ~/git/form-input-nginx-module;
    dep ndk;
}

ngx_xss {
    git https://github.com/openresty/xss-nginx-module.git ~/git/xss-nginx-module;
    dep ragel;
}

ngx_redis2 {
    git https://github.com/openresty/redis2-nginx-module.git ~/git/redis2-nginx-module;
    dep ragel;
}

ngx_eval {
    git https://github.com/openresty/nginx-eval-module.git ~/git/eval-nginx-module;
}

ngx_echo {
    git https://github.com/openresty/echo-nginx-module.git ~/git/echo-nginx-module;
}

ngx_example_lua {
    git https://github.com/agentzh/nginx-example-lua-module.git ~/git/example-lua-nginx-module;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;
    dep ngx_lua;
}

ngx_lua_upstream {
    git https://github.com/openresty/lua-upstream-nginx-module.git ~/git/lua-upstream-nginx-module;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;
    dep ngx_lua;
}

ngx_lua {
    git https://github.com/openresty/lua-nginx-module.git ~/git/lua-nginx-module $ngx_lua_branch;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;
    dep luajit ndk lua-resty-core;
}

pcrejit {
    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    file /opt/pcrejit/lib/libpcre.so;
    file /opt/pcrejit/include/pcre.h;

    test '/opt/pcrejit/bin/pcre-config --version|grep "$pcre_version"';

    cwd /tmp;
    fetch https://downloads.sourceforge.net/project/pcre/pcre/$pcre_version/pcre-$pcre_version.tar.bz2;
    tarball pcre-$pcre_version.tar.bz2;
    sh 'cd pcre-$pcre_version && CFLAGS="-g -O" CXXFLAGS="-g -O" ./configure --enable-jit --enable-utf8 --prefix=/opt/pcrejit && make -j$jobs && sudo make install';
}

ngx_auth_request {
    file ~/work/nginx/ngx_http_auth_request_module-$ngx_auth_request_version;
    cwd ~/work/nginx;
    fetch http://mdounin.ru/files/ngx_http_auth_request_module-$ngx_auth_request_version.tar.gz;
    tarball ngx_http_auth_request_module-$ngx_auth_request_version.tar.gz;
}

ngx_coolkit {
    git https://github.com/FRiCKLE/ngx_coolkit.git ~/git/coolkit-nginx-module;
}

openresty-debug {
    test '/usr/local/openresty-debug/nginx/sbin/nginx -V 2>&1 |grep "$openresty_version$"';
    #file /usr/local/openresty-debug/luajit/include/luajit-2.0/lua.h;
    file /usr/local/openresty-debug/luajit/lib/libluajit-5.1.so;
    file /usr/local/openresty-debug/nginx/sbin/nginx;
    cwd /tmp;
    fetch http://agentzh.org/misc/nginx/openresty-$openresty_version.tar.gz;
    tarball openresty-$openresty_version.tar.gz;
    sh 'cd openresty-$openresty_version && ./configure --with-cc=gcc48 --with-cc-opt="$nginx_cc_opt" --with-ld-opt="$nginx_ld_opt" --prefix=/usr/local/openresty-debug --with-luajit --with-stream_ssl_preread_module --with-http_drizzle_module --with-libdrizzle=/opt/drizzle --with-http_iconv_module -j$jobs --with-debug --with-luajit-xcflags="-DLUAJIT_USE_VALGRIND -I/opt/valgrind/include $luajit_xcflags" && make -j$jobs && sudo make install';
    dep libdrizzle openssl pcre valgrind;
}


lua-resty-memcached {
    git https://github.com/openresty/lua-resty-memcached.git ~/git/lua-resty-memcached;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-redis {
    git https://github.com/openresty/lua-resty-redis.git ~/git/lua-resty-redis;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-mysql {
    git https://github.com/openresty/lua-resty-mysql.git ~/git/lua-resty-mysql;

    dep lua-resty-rsa lua-resty-string run-docker;
    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-string {
    git https://github.com/openresty/lua-resty-string.git ~/git/lua-resty-string;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-upload {
    git https://github.com/openresty/lua-resty-upload.git ~/git/lua-resty-upload;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-dns {
    git https://github.com/openresty/lua-resty-dns.git ~/git/lua-resty-dns;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-websocket {
    git https://github.com/openresty/lua-resty-websocket.git ~/git/lua-resty-websocket;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-lock {
    git https://github.com/openresty/lua-resty-lock.git ~/git/lua-resty-lock;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-logger-socket {
    git https://github.com/cloudflare/lua-resty-logger-socket.git ~/git/lua-resty-logger-socket;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-core {

    git https://github.com/openresty/lua-resty-core.git ~/git/lua-resty-core $resty_core_branch;
    dep lua-resty-lrucache;


    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-upstream-healthcheck {
    git https://github.com/openresty/lua-resty-upstream-healthcheck.git ~/git/lua-resty-upstream-healthcheck;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-lrucache {
    git https://github.com/openresty/lua-resty-lrucache.git ~/git/lua-resty-lrucache;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-limit-traffic {
    git https://github.com/openresty/lua-resty-limit-traffic.git ~/git/lua-resty-limit-traffic;

    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-signal {
    git https://github.com/openresty/lua-resty-signal.git ~/git/lua-resty-signal;

    sh 'cd ~/git/lua-resty-signal && LD_PRELOAD= make';
    dep cc;
    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}

lua-resty-shell {
    git https://github.com/openresty/lua-resty-shell.git ~/git/lua-resty-shell;

    dep lua-tablepool lua-resty-signal;
    dep ngx_lua ngx_stream_lua;
    dep no-pool-nginx;
}


ngx_headers_more {
    git https://github.com/openresty/headers-more-nginx-module.git ~/git/headers-more-nginx-module;
}

nginx-devel-utils {
    git https://github.com/openresty/nginx-devel-utils.git ~/git/nginx-devel-utils;
    dep no-pool-nginx;
    dep openresty;
    dep patch;
}

ngx_set_misc {
    git https://github.com/openresty/set-misc-nginx-module ~/git/set-misc-nginx-module;
}

ngx_iconv {
    git https://github.com/calio/iconv-nginx-module ~/git/iconv-nginx-module;
    dep ndk;
}

no-pool-nginx {
    git https://github.com/openresty/no-pool-nginx.git ~/git/no-pool-nginx;
    dep patch;
}

openresty {
    git https://github.com/openresty/openresty.git ~/git/openresty;
}

git {
    prog git;
    yum git;
}

mockeagain {
    always;
    #file ~/git/mockeagain/mockeagain.so;
    sh 'cd ~/git/mockeagain && LD_PRELOAD= make';
    dep mockeagain-git;
    dep cc;
}

mockeagain-git {
    git https://github.com/openresty/mockeagain.git ~/git/mockeagain;
}

run-redis {
    running 'redis-server \*:6379';
    sh '(echo "daemonize yes"; echo "loglevel warning")|redis-server -';
    dep redis;
}

run-redis-bloom {
    running 'redis-server \*:6380';
    sh 'sudo docker run -d -p 6380:6380 --rm --name redis-redisbloom redislabs/rebloom:2.2.9 redis-server --loadmodule /usr/lib/redis/modules/redisbloom.so --port 6380 --port 6380';

    dep run-docker;
}

redis {
    prog redis-server;
    test 'redis-server -v|grep $redis_version';
    cwd /tmp;
    fetch 'http://download.redis.io/releases/redis-$redis_version.tar.gz';
    tarball redis-$redis_version.tar.gz;
    sh 'cd redis-$redis_version/ && ARCH= make -j$jobs && ARCH= sudo make install';
    dep cc;
}

run-postgres {
    running 'postgres: writer process';
    sh 'sudo service postgresql start || (sleep 10 && sudo service postgresql start) || sudo service postgresql initdb';
    dep run-postgres2;
}

run-postgres2 {
    running 'postgres: writer process';
    sh 'sudo service postgresql start || (sleep 10 && sudo service postgresql start) || sudo service postgresql initdb';
    dep postgres;
}

postgres {
    prog pg_ctl;
    yum postgresql-server;

    # vim /var/lib/pgsql9/data/pg_hba.conf
    # psql> create user ngx_test with password 'ngx_test';
    # psql> create database ngx_test;
    # psql> grant all privileges on database ngx_test to ngx_test;
}

run-mysql {
    running 'mysqld --';
    sh 'sudo service mysqld start || (sleep 10 && sudo service mysqld start)';
    dep mysql;
}

run-ncserver {
    running 'python3 util/nc_server.py';
    cwd ~/git/lua-nginx-module;
    sh 'nohup python3 util/nc_server.py &';
    dep python3;
}

mysql {
    prog mysqld_safe;
    yum mysql mysql-server;

    # mysql -u root
    # mysql> create database ngx_test;
    # mysql> create user 'ngx_test'@'localhost' identified by 'ngx_test';
    # mysql> grant all privileges on ngx_test.* to 'ngx_test'@'localhost' with grant option;
    # mysql> create database world;
    # mysql> use world;
    # mysql> source world.sql;
}

run-memcached {
    running 'memcached -d -p 11211 -U 11211';
    sh 'memcached -d -p 11211 -U 11211 -l 127.0.0.1 -o track_sizes';
    dep memcached;
}

run-memcached-tls {
    running 'memcached -u nobody -d -Z -p 11212';
    cwd ~/git/lua-resty-memcached;
    sh 'memcached -u nobody -d -Z -p 11212 -l 127.0.0.1 -o track_sizes -o ssl_chain_cert=./t/cert/server.crt -o ssl_key=./t/cert/server.key';

    dep memcached;
    dep lua-resty-memcached;
}

memcached {
    prog memcached;
    yum memcached;
}

nginx-module-test {
    always;
    env PATH $PWD/work/nginx/sbin:$HOME/git/nginx-devel-utils:$PATH;
    dep prove test-nginx no-pool-nginx nginx-devel-utils axel perl-protocol-websocket;
    dep cc openssl pcre;
}

perl-protocol-websocket {
    test 'perl -MProtocol::WebSocket -e1';
    cpan Protocol::WebSocket;
}

pcre {
    prog pcre-config;
    yum pcre-devel;
}

axel {
    prog axel;
    cwd /tmp;
    fetch 'http://alioth-archive.debian.org/releases/axel/axel/2.4/axel-2.4.tar.bz2';
    tarball axel-2.4.tar.bz2;
    sh 'cd axel-2.4 && ./configure && make && sudo make install';
    dep cc;
}

cc {
    prog gcc48;
    yum gcc48;
    dep make;
}

make {
    prog make;
    yum make;
}

prove {
    prog prove;
    yum perl-Test-Harness;
}

test-nginx {
    test 'perl -I$HOME/git/test-nginx/ -MTest::Nginx -e1';
    git https://github.com/openresty/test-nginx.git ~/git/test-nginx $test_nginx_branch;
    dep test-base time-hires test-longstring list-moreutils perl-http-response;
    dep ab weighttp;
}

perl-http-response {
    test 'perl -MHTTP::Response -e1';
    cpan HTTP::Response;
}

ab {
    prog ab;
    yum httpd-tools;
}

weighttp {
    prog weighttp;
    git https://github.com/lighttpd/weighttp ~/git/weighttp;
    cwd ~/git/weighttp;
    sh './waf configure && ./waf build && sudo ./waf install';
    dep libev python;
}

python {
    prog python;
    yum python;
}

python3 {
    prog python36;
    yum python36;
}

libev {
    file /usr/local/lib/libev.so;
    file /usr/local/include/ev.h;
    cwd /tmp;
    fetch http://dist.schmorp.de/libev/Attic/libev-$libev_version.tar.gz;
    tarball libev-$libev_version.tar.gz;
    sh 'cd libev-$libev_version && ./configure && make -j$jobs && sudo make install';
    dep cxx cc;
}

list-moreutils {
    test 'perl -MList::MoreUtils -e1';
    yum perl-List-MoreUtils;
}

test-longstring {
    test 'perl -MTest::LongString -e1';
    cpan Test::LongString;
}

time-hires {
    test 'perl -MTime::HiRes -e1';
    yum perl-Time-HiRes;
}

test-base {
    test 'perl -e "require(q{Test/Base.pm});"';
    yum perl-Test-Base;
    dep text-diff;
}

text-diff {
    test 'perl -MText::Diff -e1';
    yum perl-Text-Diff;
}

patch {
    prog patch;
    yum patch;
}

ndk {
    git https://github.com/simpl/ngx_devel_kit.git ~/git/ndk-nginx-module;
}

ngx_redis {
    git https://github.com/openresty/ngx_http_redis.git ~/work/nginx/ngx_http_redis;
}

cpan {
    prog cpan;
    yum perl-CPAN;
    dep cc;
}




t-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

t-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

t-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

t-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}
t-ngx_encrypted_session {
    always;
    cwd ~/git/encrypted-session-nginx-module;
    env PATH '~/git/encrypted-session-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_encrypted_session;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua;
}

t-ngx_array_var {
    always;
    cwd ~/git/array-var-nginx-module;
    env PATH '~/git/array-var-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_array_var;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc;
}

t-ngx_set_misc {
    always;
    cwd ~/git/set-misc-nginx-module;
    env PATH '~/git/set-misc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_set_misc;
    dep gd-devel;

    dep ndk ngx_echo ngx_iconv;
}

t-ngx_headers_more {
    always;
    cwd ~/git/headers-more-nginx-module;
    env PATH '~/git/headers-more-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_headers_more;
    dep gd-devel;

    dep ngx_eval ngx_echo ngx_lua;
}

t-ngx_example_lua {
    always;
    cwd ~/git/example-lua-nginx-module;
    env PATH '~/git/example-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_example_lua;
    dep gd-devel;

    dep ngx_echo ngx_lua;
}

t-ngx_lua_upstream {
    always;
    cwd ~/git/lua-upstream-nginx-module;
    env PATH '~/git/lua-upstream-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua_upstream;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_set_misc;
}

t-ngx_xss {
    always;
    cwd ~/git/xss-nginx-module;
    env PATH '~/git/xss-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_xss;
    dep gd-devel;

    dep ngx_echo ndk ngx_lua;
}

t-ngx_lua {
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;
    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

t-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

t-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

t-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

t-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

t-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

t-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

t-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

t-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

t-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

t-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

t-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


t-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

t-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

t-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

t-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

t-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

t-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

t-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

t-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

t-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

t-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

t-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

t-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

t-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

t-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

t-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


tv-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

tv-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

tv-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

tv-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}
tv-ngx_encrypted_session {
    always;
    cwd ~/git/encrypted-session-nginx-module;
    env PATH '~/git/encrypted-session-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_encrypted_session;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua;
}

tv-ngx_array_var {
    always;
    cwd ~/git/array-var-nginx-module;
    env PATH '~/git/array-var-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_array_var;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc;
}

tv-ngx_set_misc {
    always;
    cwd ~/git/set-misc-nginx-module;
    env PATH '~/git/set-misc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_set_misc;
    dep gd-devel;

    dep ndk ngx_echo ngx_iconv;
}

tv-ngx_headers_more {
    always;
    cwd ~/git/headers-more-nginx-module;
    env PATH '~/git/headers-more-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_headers_more;
    dep gd-devel;

    dep ngx_eval ngx_echo ngx_lua;
}

tv-ngx_example_lua {
    always;
    cwd ~/git/example-lua-nginx-module;
    env PATH '~/git/example-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_example_lua;
    dep gd-devel;

    dep ngx_echo ngx_lua;
}

tv-ngx_lua_upstream {
    always;
    cwd ~/git/lua-upstream-nginx-module;
    env PATH '~/git/lua-upstream-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua_upstream;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_set_misc;
}

tv-ngx_xss {
    always;
    cwd ~/git/xss-nginx-module;
    env PATH '~/git/xss-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_xss;
    dep gd-devel;

    dep ngx_echo ndk ngx_lua;
}

tv-ngx_lua {
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;
    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

tv-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

tv-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

tv-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

tv-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

tv-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

tv-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

tv-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

tv-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

tv-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

tv-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

tv-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


tv-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

tv-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

tv-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

tv-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

tv-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

tv-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

tv-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

tv-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

tv-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

tv-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

tv-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

tv-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

tv-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

tv-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

tv-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


tr-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

tr-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

tr-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

tr-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}


tr-ngx_lua {

    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

tr-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

tr-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

tr-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

tr-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

tr-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

tr-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

tr-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

tr-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

tr-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

tr-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

tr-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


tr-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

tr-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

tr-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

tr-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

tr-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

tr-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

tr-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

tr-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

tr-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

tr-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

tr-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

tr-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

tr-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

tr-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

tr-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


trv-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

trv-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

trv-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

trv-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}


trv-ngx_lua {

    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

trv-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

trv-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

trv-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

trv-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

trv-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

trv-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

trv-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

trv-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

trv-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

trv-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

trv-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


trv-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

trv-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

trv-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

trv-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

trv-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

trv-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

trv-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

trv-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

trv-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

trv-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

trv-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

trv-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

trv-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

trv-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

trv-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    env MOCKEAGAIN r;
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


tw-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

tw-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

tw-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

tw-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}


tw-ngx_lua {

    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

tw-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

tw-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

tw-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

tw-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

tw-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

tw-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

tw-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

tw-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

tw-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

tw-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

tw-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


tw-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

tw-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

tw-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

tw-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

tw-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

tw-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

tw-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

tw-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

tw-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

tw-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

tw-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

tw-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

tw-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

tw-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

tw-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


twv-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

twv-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

twv-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

twv-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}


twv-ngx_lua {

    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

twv-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

twv-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

twv-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

twv-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

twv-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

twv-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

twv-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

twv-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

twv-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

twv-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

twv-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


twv-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

twv-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

twv-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

twv-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

twv-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

twv-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

twv-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

twv-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

twv-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

twv-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

twv-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

twv-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

twv-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

twv-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

twv-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    env TEST_NGINX_POSTPONE_OUTPUT 1;
    env TEST_NGINX_EVENT_TYPE poll;
    #env MOCKEAGAIN_VERBOSE 1;
    env MOCKEAGAIN w;
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


th-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

th-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

th-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

th-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}
th-ngx_encrypted_session {
    always;
    cwd ~/git/encrypted-session-nginx-module;
    env PATH '~/git/encrypted-session-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_encrypted_session;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua;
}

th-ngx_array_var {
    always;
    cwd ~/git/array-var-nginx-module;
    env PATH '~/git/array-var-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_array_var;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc;
}

th-ngx_set_misc {
    always;
    cwd ~/git/set-misc-nginx-module;
    env PATH '~/git/set-misc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_set_misc;
    dep gd-devel;

    dep ndk ngx_echo ngx_iconv;
}

th-ngx_headers_more {
    always;
    cwd ~/git/headers-more-nginx-module;
    env PATH '~/git/headers-more-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_headers_more;
    dep gd-devel;

    dep ngx_eval ngx_echo ngx_lua;
}

th-ngx_example_lua {
    always;
    cwd ~/git/example-lua-nginx-module;
    env PATH '~/git/example-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_example_lua;
    dep gd-devel;

    dep ngx_echo ngx_lua;
}

th-ngx_lua_upstream {
    always;
    cwd ~/git/lua-upstream-nginx-module;
    env PATH '~/git/lua-upstream-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua_upstream;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_set_misc;
}

th-ngx_xss {
    always;
    cwd ~/git/xss-nginx-module;
    env PATH '~/git/xss-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_xss;
    dep gd-devel;

    dep ngx_echo ndk ngx_lua;
}

th-ngx_lua {
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;
    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

th-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

th-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

th-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

th-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

th-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

th-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

th-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

th-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

th-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

th-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

th-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


th-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

th-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

th-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

th-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

th-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

th-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

th-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

th-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

th-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

th-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

th-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

th-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

th-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

th-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

th-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


thv-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

thv-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

thv-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

thv-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}
thv-ngx_encrypted_session {
    always;
    cwd ~/git/encrypted-session-nginx-module;
    env PATH '~/git/encrypted-session-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_encrypted_session;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua;
}

thv-ngx_array_var {
    always;
    cwd ~/git/array-var-nginx-module;
    env PATH '~/git/array-var-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_array_var;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc;
}

thv-ngx_set_misc {
    always;
    cwd ~/git/set-misc-nginx-module;
    env PATH '~/git/set-misc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_set_misc;
    dep gd-devel;

    dep ndk ngx_echo ngx_iconv;
}

thv-ngx_headers_more {
    always;
    cwd ~/git/headers-more-nginx-module;
    env PATH '~/git/headers-more-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_headers_more;
    dep gd-devel;

    dep ngx_eval ngx_echo ngx_lua;
}

thv-ngx_example_lua {
    always;
    cwd ~/git/example-lua-nginx-module;
    env PATH '~/git/example-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_example_lua;
    dep gd-devel;

    dep ngx_echo ngx_lua;
}

thv-ngx_lua_upstream {
    always;
    cwd ~/git/lua-upstream-nginx-module;
    env PATH '~/git/lua-upstream-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua_upstream;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_set_misc;
}

thv-ngx_xss {
    always;
    cwd ~/git/xss-nginx-module;
    env PATH '~/git/xss-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_xss;
    dep gd-devel;

    dep ngx_echo ndk ngx_lua;
}

thv-ngx_lua {
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;
    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

thv-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

thv-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

thv-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

thv-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

thv-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

thv-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

thv-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

thv-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

thv-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

thv-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

thv-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


thv-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

thv-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

thv-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

thv-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

thv-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

thv-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

thv-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

thv-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

thv-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

thv-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

thv-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

thv-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

thv-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

thv-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

thv-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';
    env TEST_NGINX_USE_HUP 1;

    env TEST_NGINX_SLEEP 0.015;

    env LD_LIBRARY_PATH '/opt/luajit-sysm/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND 1;


    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';    dep luajit_sysmalloc;
    dep valgrind;

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


tl-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

tl-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

tl-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

tl-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}
tl-ngx_encrypted_session {
    always;
    cwd ~/git/encrypted-session-nginx-module;
    env PATH '~/git/encrypted-session-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_encrypted_session;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua;
}

tl-ngx_array_var {
    always;
    cwd ~/git/array-var-nginx-module;
    env PATH '~/git/array-var-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_array_var;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc;
}

tl-ngx_set_misc {
    always;
    cwd ~/git/set-misc-nginx-module;
    env PATH '~/git/set-misc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_set_misc;
    dep gd-devel;

    dep ndk ngx_echo ngx_iconv;
}

tl-ngx_headers_more {
    always;
    cwd ~/git/headers-more-nginx-module;
    env PATH '~/git/headers-more-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_headers_more;
    dep gd-devel;

    dep ngx_eval ngx_echo ngx_lua;
}

tl-ngx_example_lua {
    always;
    cwd ~/git/example-lua-nginx-module;
    env PATH '~/git/example-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_example_lua;
    dep gd-devel;

    dep ngx_echo ngx_lua;
}

tl-ngx_lua_upstream {
    always;
    cwd ~/git/lua-upstream-nginx-module;
    env PATH '~/git/lua-upstream-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua_upstream;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_set_misc;
}

tl-ngx_xss {
    always;
    cwd ~/git/xss-nginx-module;
    env PATH '~/git/xss-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_xss;
    dep gd-devel;

    dep ngx_echo ndk ngx_lua;
}

tl-ngx_lua {
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;
    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

tl-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

tl-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

tl-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

tl-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

tl-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

tl-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

tl-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

tl-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

tl-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

tl-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

tl-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


tl-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

tl-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

tl-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

tl-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

tl-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

tl-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

tl-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

tl-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

tl-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

tl-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

tl-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

tl-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

tl-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

tl-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

tl-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK 1;
    env LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH;

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


to-ngx_srcache {
    always;
    cwd ~/git/srcache-nginx-module;
    env PATH '~/git/srcache-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_srcache;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-postgres;
}

to-ngx_rds_json {
    always;
    cwd ~/git/rds-json-nginx-module;
    env PATH '~/git/rds-json-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_json;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_drizzle ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var ngx_form_input ngx_postgres;
}

to-ngx_rds_csv {
    always;
    cwd ~/git/rds-csv-nginx-module;
    env PATH '~/git/rds-csv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_rds_csv;
    dep gd-devel;

    dep run-mysql run-postgres;
    dep ngx_eval ngx_echo ngx_xss ndk ngx_set_misc ngx_array_var;
    dep ngx_drizzle ngx_form_input ngx_postgres;
}

to-ngx_drizzle {
    always;
    cwd ~/git/drizzle-nginx-module;
    env PATH '~/git/drizzle-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_drizzle;
    dep gd-devel;

    dep run-mysql;
    dep ngx_lua ngx_echo ngx_rds_json;
    dep ngx_headers_more ndk ngx_set_misc;
}
to-ngx_encrypted_session {
    always;
    cwd ~/git/encrypted-session-nginx-module;
    env PATH '~/git/encrypted-session-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_encrypted_session;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua;
}

to-ngx_array_var {
    always;
    cwd ~/git/array-var-nginx-module;
    env PATH '~/git/array-var-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_array_var;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc;
}

to-ngx_set_misc {
    always;
    cwd ~/git/set-misc-nginx-module;
    env PATH '~/git/set-misc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_set_misc;
    dep gd-devel;

    dep ndk ngx_echo ngx_iconv;
}

to-ngx_headers_more {
    always;
    cwd ~/git/headers-more-nginx-module;
    env PATH '~/git/headers-more-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_headers_more;
    dep gd-devel;

    dep ngx_eval ngx_echo ngx_lua;
}

to-ngx_example_lua {
    always;
    cwd ~/git/example-lua-nginx-module;
    env PATH '~/git/example-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_example_lua;
    dep gd-devel;

    dep ngx_echo ngx_lua;
}

to-ngx_lua_upstream {
    always;
    cwd ~/git/lua-upstream-nginx-module;
    env PATH '~/git/lua-upstream-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua_upstream;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_set_misc;
}

to-ngx_xss {
    always;
    cwd ~/git/xss-nginx-module;
    env PATH '~/git/xss-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_xss;
    dep gd-devel;

    dep ngx_echo ndk ngx_lua;
}

to-ngx_lua {
    env LD_PRELOAD '~/git/mockeagain/mockeagain.so';
    dep mockeagain;
    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql run-ncserver mockeagain;
    dep pcrejit ndk ngx_set_misc;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle ngx_srcache;
    dep ngx_rds_json ngx_coolkit ngx_redis2 ngx_lua_upstream;
    dep openresty-debug;
    dep ngx-lua-tests-firewall-rules;
    dep ngx_stream_lua;
    dep systemtap;
}

to-ngx_memc {
    always;
    cwd ~/git/memc-nginx-module;
    env PATH '~/git/memc-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_memc;
    dep gd-devel;

    dep run-memcached;
    dep ndk ngx_eval ngx_echo ngx_lua;
}

to-ngx_redis2 {
    always;
    cwd ~/git/redis2-nginx-module;
    env PATH '~/git/redis2-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_redis2;
    dep gd-devel;

    dep run-redis;
    dep ndk ngx_eval ngx_echo ngx_set_misc ngx_lua;
}

to-ngx_echo {
    always;
    cwd ~/git/echo-nginx-module;
    env PATH '~/git/echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_echo;
    dep gd-devel;

    dep ndk ngx_set_misc ngx_eval ngx_xss;
    dep ngx_rds_json ngx_headers_more ngx_lua;
}

to-ngx_eval {
    always;
    cwd ~/git/eval-nginx-module;
    env PATH '~/git/eval-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_eval;
    dep gd-devel;

    dep run-memcached ngx_echo ngx_memc;
}

to-ngx_form_input {
    always;
    cwd ~/git/form-input-nginx-module;
    env PATH '~/git/form-input-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_form_input;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_array_var;
}

to-ngx_postgres {
    always;
    cwd ~/git/postgres-nginx-module;
    env PATH '~/git/postgres-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_postgres;
    dep gd-devel;

    dep ngx_echo ngx_lua ngx_eval ngx_rds_json;
    dep ndk ngx_set_misc ngx_form_input ngx_coolkit;
    dep ngx_auth_request run-postgres;
}

to-ngx_iconv {
    always;
    cwd ~/git/iconv-nginx-module;
    env PATH '~/git/iconv-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_iconv;
    dep gd-devel;

    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json ngx_headers_more ngx_form_input;
}

to-ngx_coolkit {
    always;
    cwd ~/git/coolkit-nginx-module;
    env PATH '~/git/coolkit-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_coolkit;
    dep gd-devel;

    dep ngx-coolkit-build-script;
    dep ngx_echo ndk ngx_set_misc ngx_lua ngx_rds_json;
}

to-ngx_replace_filter {
    env SREGEX_INC ~/git/sregex/src;
    env SREGEX_LIB ~/git/sregex;

    always;
    cwd ~/git/replace-filter-nginx-module;
    env PATH '~/git/replace-filter-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_replace_filter;
    dep gd-devel;

    dep sregex ngx_echo ngx_lua;
}

to-ngx_stream_echo {
    always;
    cwd ~/git/stream-echo-nginx-module;
    env PATH '~/git/stream-echo-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_echo;
    dep gd-devel;

    dep ngx_lua;
}

to-ngx_stream_lua {
    always;
    cwd ~/git/stream-lua-nginx-module;
    env PATH '~/git/stream-lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;


    dep nginx-module-test ngx_stream_lua;
    dep gd-devel;

    dep ngx-lua-tests-firewall-rules;
    dep ngx-lua-tests-ip-settings;
    dep run-memcached run-redis mockeagain pcrejit;
    dep ngx_lua ngx_echo ngx_stream_echo ngx_headers_more ngx_memc;
}


to-lua-resty-memcached {
    always;
    cwd ~/git/lua-resty-memcached;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    dep run-memcached-tls;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-memcached;

    dep build-ngx_lua;
}

to-lua-resty-redis {
    always;
    cwd ~/git/lua-resty-redis;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';
    dep ngx-lua-tests-firewall-rules;
    dep run-redis-bloom;
    env TEST_NGINX_REDIS_PORT 6380;
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-redis;

    dep build-ngx_lua;
}

to-lua-resty-mysql {
    always;
    cwd ~/git/lua-resty-mysql;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_MYSQL_PATH /var/run/mysqld/mysqld.sock;
    env TEST_NGINX_MYSQL_PORT 3307;
    env DB_VERSION mysql:5.5;
    sh 'cd ~/git/lua-resty-mysql && ./.travis/initializedb.sh';
    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-mysql;

    dep build-ngx_lua;
}

to-lua-resty-string {
    always;
    cwd ~/git/lua-resty-string;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-string;

    dep build-ngx_lua;
}

to-lua-resty-upload {
    always;
    cwd ~/git/lua-resty-upload;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upload;

    dep build-ngx_lua;
}

to-lua-resty-dns {
    always;
    cwd ~/git/lua-resty-dns;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-dns;

    dep build-ngx_lua;
}

to-lua-resty-websocket {
    always;
    cwd ~/git/lua-resty-websocket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-websocket;

    dep build-ngx_lua;
}

to-lua-resty-lock {
    always;
    cwd ~/git/lua-resty-lock;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lock;

    dep build-ngx_lua;
}

to-lua-resty-logger-socket {
    always;
    cwd ~/git/lua-resty-logger-socket;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-logger-socket;

    dep build-ngx_lua;
}

to-lua-resty-core {
    always;
    cwd ~/git/lua-resty-core;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-core;

    dep build-ngx_lua;
}

to-lua-resty-upstream-healthcheck {
    always;
    cwd ~/git/lua-resty-upstream-healthcheck;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-upstream-healthcheck;

    dep build-ngx_lua;
}

to-lua-resty-lrucache {
    always;
    cwd ~/git/lua-resty-lrucache;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-lrucache;

    dep build-ngx_lua;
}

to-lua-resty-limit-traffic {
    always;
    cwd ~/git/lua-resty-limit-traffic;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-limit-traffic;

    dep build-ngx_lua;
}

to-lua-resty-signal {
    always;
    cwd ~/git/lua-resty-signal;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-signal;

    dep build-ngx_lua;
}

to-lua-resty-shell {
    always;
    cwd ~/git/lua-resty-shell;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:$PATH';

    env TEST_NGINX_REDIS_PORT '';

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP '';

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT '-O3 -funsigned-char';
    env NGX_BUILD_NO_DEBUG 1;
    env NGX_BUILD_EXTRA_CONFIG_OPTS '--with-threads';
    env LUA_PATH '../lua-resty-core/lib/?.lua;../lua-resty-lrucache/lib/?.lua;;';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';

    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';
    sh 'killall nginx || exit 0';
    sh 'killall -9 weighttp || exit 0';
    sh 'killall -9 ab || exit 0';
    sh 'if [ "$use_lua_resty_core" = "1" ]; then export TEST_NGINX_INIT_BY_LUA="jit.opt.start(\'minstitch=0\') require(\'resty.core.base\').set_string_buf_size(1) require(\'resty.core.regex\').set_buf_grow_ratio(1)"; fi; prove -I../test-nginx/lib -r t || exit 0';

    dep run-caching-nameserver;

    dep ngx_lua nginx-module-test lua-resty-shell;

    dep build-ngx_lua;
}


ngx-coolkit-build-script {
    file ~/git/coolkit-nginx-module/util/build.sh;
    test 'test -x ~/git/coolkit-nginx-module/util/build.sh';
    cwd ~/git/coolkit-nginx-module/util;
    fetch 'http://agentzh.org/misc/nginx/ngx-coolkit-build.sh';
    sh 'mv ngx-coolkit-build.sh build.sh && chmod +x build.sh';
}

valgrind {
    env PATH /opt/valgrind/bin:$PATH;
    file /opt/valgrind/bin/valgrind;
    test '/opt/valgrind/bin/valgrind --version|grep $valgrind_version';
    cwd /tmp;
    fetch ftp://sourceware.org/pub/valgrind/valgrind-$valgrind_version.tar.bz2;
    tarball valgrind-$valgrind_version.tar.bz2;
    sh 'cd valgrind-$valgrind_version && ./configure --prefix=/opt/valgrind && make -j$jobs && sudo make install';
    dep cc;
}

opsboy {
    git https://github.com/openresty/opsboy.git ~/git/opsboy;
    dep cc pegex tt2;
}

tt2 {
    test 'perl -MTemplate -e1';
    yum perl-Template-Toolkit;
}

parse-recdescent {
    test 'perl -MParse::RecDescent -e1';
    yum perl-Parse-RecDescent;
}

pegex {
    test 'perl -MPegex -e1';
    sh 'echo y|sudo cpan -i Pegex';
}


build-ngx_lua {
    always;
    cwd ~/git/lua-nginx-module;
    env PATH '~/git/lua-nginx-module/work/nginx/sbin:/usr/local/openresty-debug/bin:$PATH';

    env PCRE_LIB /opt/pcrejit/lib;
    env PCRE_INC /opt/pcrejit/include;

    env OPENSSL_LIB /opt/ssl/lib;
    env OPENSSL_INC /opt/ssl/include;

    env LIBDRIZZLE_INC /opt/drizzle/include/libdrizzle-1.0;
    env LIBDRIZZLE_LIB /opt/drizzle/lib;

    env LUAJIT_LIB /opt/luajit/lib;
    env LUAJIT_INC `echo -n /opt/luajit/include/luajit-*`;

    env TEST_NGINX_EVENT_TYPE '';
    env MOCKEAGAIN '';
    env TEST_NGINX_RESOLVER '127.0.0.1';

    # warm-up the DNS cache with the domtains used in our tests.
    sh 'dig @127.0.0.1 openresty.org || exit 0';
    sh 'dig @127.0.0.1 agentzh.org || exit 0';
    # NB: sregex.org is not available now.
    # sh 'dig @127.0.0.1 sregex.org || exit 0';
    # sh 'dig @127.0.0.1 g.sregex.org || exit 0';
    sh 'dig @127.0.0.1 www.google.com || exit 0';

    env TEST_NGINX_USE_STAP $use_stap;

    env NGX_BUILD_CC_OPTS '-I/opt/systemtap/include';
    env NGX_BUILD_CC_OPTS '-DNGX_LUA_USE_ASSERT -DNGX_LUA_ABORT_AT_PANIC $NGX_BUILD_CC_OPTS';
    env NGX_BUILD_CC 'ccache gcc48';
    env CCACHE_BASEDIR '$PWD';
    dep ccache;

    env NGX_BUILD_OPT $nginx_cc_opt;
    env NGX_BUILD_LD_OPTS $nginx_ld_opt;
    env NGX_BUILD_NO_DEBUG '';
    env NGX_BUILD_JOBS $jobs;
    env NGX_BUILD_DTRACE 1;

    env LD_LIBRARY_PATH ~/git/mockeagain:$LD_LIBRARY_PATH;
    env LD_PRELOAD '';

    env TEST_NGINX_CHECK_LEAK '';

    env TEST_NGINX_USE_HUP '';

    env TEST_NGINX_SLEEP 0.015;
    env LD_LIBRARY_PATH '/opt/luajit/lib:$LD_LIBRARY_PATH';
    env TEST_NGINX_USE_VALGRIND '';

    sh 'PAGER= git log HEAD^..HEAD';

    sh 'if [ -n "$force" -a "$force" != "0" ]; then rm -rf buildroot/nginx-$nginx_version*; test -f config && touch config || exit 0; fi';
    sh './util/build.sh $nginx_version || ( [ -z "$force" -o "$force" = "0" ] && touch config && ./util/build.sh $nginx_version )';
    sh 'nginx -V && ldd `which nginx`|grep -E "lua|pcre|drizzle|ssl"';


    dep run-caching-nameserver;


    dep nginx-module-test ngx_lua;
    dep gd-devel;

    dep run-memcached run-redis run-mysql mockeagain;
    dep pcrejit ndk ngx_set_misc ngx_auth_request;
    dep ngx_echo ngx_memc ngx_headers_more;
    dep ngx_drizzle;
    dep ngx_rds_json ngx_coolkit;
    dep openresty-debug;
}

gd-devel {
    file /usr/include/gd.h;
    yum gd-devel;
}

systemtap {
    dep stap kernel-debuginfo stapusr-grp stapdev-grp;
}

stapusr-grp {
    test 'groups `whoami`|grep stapusr > /dev/null';
    sh 'sudo usermod -a -G stapusr `whoami`';
}

stapdev-grp {
    test 'groups `whoami`|grep stapdev > /dev/null';
    sh 'sudo usermod -a -G stapdev `whoami`';
}

kernel-debuginfo {
    test 'ls /usr/lib/debug/lib/modules/`uname -r`/kernel/* > /dev/null 2>&1';
    debuginfo 'kernel-`uname -r`';
}

stap {
    env PATH /opt/systemtap/bin:$PATH;
    file /opt/systemtap/bin/stap;
    test '/opt/systemtap/bin/stap --version 2>&1 | grep "version $systemtap_version"';
    cwd /tmp;
    fetch http://sourceware.org/systemtap/ftp/releases/systemtap-$systemtap_version.tar.gz;
    tarball systemtap-$systemtap_version.tar.gz;
    sh 'cd systemtap-$systemtap_version && ./configure --prefix=/opt/systemtap --disable-docs --disable-publican --disable-refdocs && make -j$jobs && sudo rm -rf /opt/systemtap && sudo make install';
    dep cc elfutils-devel msgfmt;
}

msgfmt {
    prog msgfmt;
    yum gettext;
}

elfutils-devel {
    file /usr/include/dwarf.h;
    #file /usr/lib/libdw.so;
    yum elfutils-devel;
}

yum-utils {
    prog debuginfo-install;
    yum yum-utils;
}

wget {
    prog wget;
    yum wget;
}

tar {
    prog tar;
    yum install tar;
}

ccache {
    prog ccache;
    test 'ccache -V|grep -q "version $ccache_version"';
    cwd /tmp;
    fetch https://github.com/ccache/ccache/releases/download/v$ccache_version/ccache-$ccache_version.tar.gz;
    tarball ccache-$ccache_version.tar.gz;
    sh 'cd ccache-$ccache_version && ./configure && make -j$jobs && sudo make install';
}
